#!/usr/bin/python2

########################################################################
#  This Source Code Form is subject to the terms of the Mozilla Public #
#  License, v. 2.0. If a copy of the MPL was not distributed with this #
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.            #
########################################################################

#  A script that will play video files as screen savers in xscreensaver.
#  Videos are played in random order and do not repeat until all videos
#  have been played.
#
#  See the README.md file for more details.

import os
import random
import json
import optparse
import subprocess

#  This function creates a new config file containing the video paths
#  and the list of videos to be played.
def create_new_config_file(path_list, config_file):
	config = {}
	config['pathlist'] = path_list
	config['videolist'] = []
	for path in path_list:
		for dirpath, dirnames, filenames in os.walk(path):
			for fn in filenames:
				if fn.endswith(('.mov', '.mp4', '.mkv', '.mpg', '.avi')):
					config['videolist'].append(os.path.join(dirpath, fn))
	random.shuffle(config['videolist'])
	with open(config_file, 'w') as f:
		json.dump(config, f)

if __name__ == "__main__":

	#  Process the command line
	usage = 'Usage: {} -d "directory[,directory,[...]]"'.format(os.path.basename(__file__))
	description = 'This script is a xscreensaver "hack" which plays video files when xscreensaver blanks the display.'
	parser = optparse.OptionParser(usage=usage, description=description)
	parser.add_option('-d', '--dirpath', dest='dirpath', help='A comma-seperated list of directories which contain the video files to be played')
	parser.add_option('-w', '--what', dest='unknown_option', help='Unknown option passed by xscreensaver-demo')
	(opts, args) = parser.parse_args()
	if not opts.dirpath:
		print usage
		print "\nYou must specify at least one directory containing video files using the \"-d\" option"
		exit(1)
	else:
		video_paths = [element.strip() for element in opts.dirpath.split(',')]
		#  Confirm that the specified directories exist
		for path in video_paths:
			if not os.path.isdir(path):
				print "Unable to find {} directory, ignoring it".format(path)
				video_paths.remove(path)
		if len(video_paths) <= 0:
			print usage
			print "\nNone of the directories you specified exist.  You must specify at least\none existing directory containing video files using the \"-d\" option."
			exit(1)

	#  We use a config file to remember what the video paths are and
	#  which videos we have not played yet.
	config_file = os.path.join(os.environ['HOME'], '.config', 'xscreensaver-movies.conf')

	#  Read the config file to get the video paths list
	if os.path.exists(config_file):
		with open(config_file, 'r') as f:
			config = json.load(f)

	#  If the config file doesn't exist when we start the script, or
	#  when the video_paths value has changed, create a new config file
	if not os.path.exists(config_file) or video_paths != config['pathlist']:
		create_new_config_file(video_paths, config_file)

	#  Read the config file to get the list of videos yet to be played		
	with open(config_file, 'r') as f:
		config = json.load(f)

	while True:
		#  If there's nothing left in the list of videos, make a new random
		#  list, i.e., start over from the beginning
		if len(config['videolist']) <= 0:
			create_new_config_file(video_paths, config_file)
			with open(config_file, 'r') as f:
				config = json.load(f)
			
		#  Pop the first video off the top of the list and write the
		#  remainder of the list back to the config file
		video = config['videolist'].pop(0)
		with open(config_file, 'w') as f:
			json.dump(config, f)
		
		#  Play the popped file
		if os.path.exists(video):
			if 'XSCREENSAVER_WINDOW' in os.environ:
				cmdline = "mpv --really-quiet --no-audio --fs --no-stop-screensaver --wid='{}' --panscan=1.0 --hwdec=auto \"{}\"".format(os.environ['XSCREENSAVER_WINDOW'], video)
			else:
				cmdline = "mpv --really-quiet --no-audio --fs --no-stop-screensaver --panscan=1.0 --hwdec=auto \"{}\"".format(video)
			subprocess.call(cmdline, shell=True)
